<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script src="https://threejs.org/build/three.min.js"></script>
    <script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>

    <!-- <script>
        var scene = new THREE.Scene();
        var camera = new THREE.PerspectiveCamera(
          60,
          window.innerWidth / window.innerHeight,
          1,
          1000
        );
        camera.position.set(0, 10, 30);
        var renderer = new THREE.WebGLRenderer({
          antialias: true,
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setClearColor(0x808080);
        document.body.appendChild(renderer.domElement);
  
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
  
        var light = new THREE.DirectionalLight(0xffffff, 0.5);
        light.position.setScalar(100);
        scene.add(light);
        scene.add(new THREE.AmbientLight(0xffffff, 0.5));
  
  
      const shape = new THREE.Shape();
      shape.moveTo(0, 0);
      shape.lineTo(8, 0);
      shape.bezierCurveTo(8, 0, 9.5, 0.5, 10, 2);
      shape.lineTo(10, 8);
      shape.bezierCurveTo(10, 8, 9.5, 9.5, 8, 10);
      shape.lineTo(0, 10);
      shape.lineTo(0, 0);
  
  
        const extrudeSettings = {
          steps: 1,
          depth: 1,
          bevelEnabled: false,
          bevelThickness: 1,
          bevelSize: 1,
          bevelOffset: 0,
          bevelSegments: 1,
        };
  
        const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
        const material = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
        const mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);
  
        render();
  
        function render() {
          requestAnimationFrame(render);
          renderer.render(scene, camera);
        }
      </script> -->

    <script>
      // const params = [
      //   [0, -3, 7, 1],
      //   [0, 3, 7, 0],
      //   [1, 3, 7, 4.5, 6.5, 5, 5, 1],
      //   [0, 5, -5, 1],
      //   [1, 5, -5, 4.5, -6.5, 3, -7, 1],
      //   [0, -3, -7, 1],
      //   [1, -3, -7, -4.5, -6.5, -5, -5, 1],
      //   [0, -5, 5, 1],
      //   [1, -5, 5, -4.5, 6.5, -3, 7, 1],
      // ];

      const rectangle = [
        [0, -5, 7, 0], 
        [0, 5, 7, 0], 
        [0, 5, -7, 2], 
        [0, -5, -7, 4],
        [0, -5, 7, 6]
      ];

      var scene = new THREE.Scene();

      var camera = new THREE.PerspectiveCamera(
        60,
        window.innerWidth / window.innerHeight,
        1,
        1000
      );
      camera.position.set(0, 10, 30);

      var renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x808080);
      document.body.appendChild(renderer.domElement);

      var controls = new THREE.OrbitControls(camera, renderer.domElement);

      var light = new THREE.DirectionalLight(0xffffff, 0.5);
      light.position.setScalar(100);
      scene.add(light);
      scene.add(new THREE.AmbientLight(0xffffff, 0.5));

      const material1 = new THREE.MeshPhongMaterial({ color: 0x00ff00 });
      const material2 = new THREE.MeshPhongMaterial({ color: 0xff0000 });
      const material3 = new THREE.MeshPhongMaterial({ color: 0x0000ff });
      const material4 = new THREE.MeshPhongMaterial({ color: 0xf1f1f1 });
      const material5 = new THREE.MeshPhongMaterial({ color: 0x00ffff });



      const shape = new THREE.Shape();
      shape.moveTo(rectangle[0][1], rectangle[0][2]);

      for (var i = 1; i < rectangle.length; i++) {
        var x = rectangle[i][1];
        var y = rectangle[i][2];

        if (rectangle[i][0] == 0) {
          shape.lineTo(x, y);
        } else {
          var x1 = rectangle[i][3];
          var y1 = rectangle[i][4];
          var x2 = rectangle[i][5];
          var y2 = rectangle[i][6];
          shape.bezierCurveTo(x, y, x1, y1, x2, y2);
        }
      }


      const randA = new THREE.Shape();
      randA.moveTo(-5, 7);
      randA.lineTo(-3, 7);
      randA.bezierCurveTo(-3, 7, -2.25, 7.25, -2, 8);
      randA.lineTo(-2, 9);
      randA.bezierCurveTo(-2, 9, -2.25, 9.75, -3, 10);
      randA.lineTo(-5, 10);
      randA.lineTo(-5, 7);

      const randB = new THREE.Shape();
      randB.moveTo(5, 7);
      randB.lineTo(7, 7);
      randB.bezierCurveTo(7, 7, 7.75, 7.25, 8, 8);
      randB.lineTo(8, 9);
      randB.bezierCurveTo(8, 9, 7.75, 9.75, 7, 10);
      randB.lineTo(5, 10);
      randB.lineTo(5, 7);

      const randC = new THREE.Shape();
      randC.moveTo(5, -7);
      randC.lineTo(3, -7);
      randC.bezierCurveTo(3, -7, 2.25, -7.25, 2, -8);
      randC.lineTo(2, -9);
      randC.bezierCurveTo(2, -9, 2.25, -9.75, 3, -10);
      randC.lineTo(5, -10);
      randC.lineTo(5, -7);

      const randD = new THREE.Shape();
      randD.moveTo(-5, -7);
      randD.lineTo(-7, -7);
      randD.bezierCurveTo(-7, -7, -7.75, -6.75, -8, -6);
      randD.lineTo(-8, -5);
      randD.bezierCurveTo(-8, -5, -7.75, -4.25, -7, -4);
      randD.lineTo(-5, -4);
      randD.lineTo(-5, -7);


      // const randA = new THREE.Shape();
      // randA.moveTo(-5, 7);
      // randA.lineTo(-3, 7);
      // randA.lineTo(-2, 8);
      // randA.lineTo(-2, 9);
      // randA.lineTo(-3, 10);
      // randA.lineTo(-5, 10);
      // randA.lineTo(-5, 7);

      // const randB = new THREE.Shape();
      // randB.moveTo(5, 7);
      // randB.lineTo(7, 7);
      // randB.lineTo(8, 8);
      // randB.lineTo(8, 9);
      // randB.lineTo(7, 10);
      // randB.lineTo(5, 10);
      // randB.lineTo(5, 7);

      // const randC = new THREE.Shape();
      // randC.moveTo(5, -7);
      // randC.lineTo(3, -7);
      // randC.lineTo(2, -8);
      // randC.lineTo(2, -9);
      // randC.lineTo(3, -10);
      // randC.lineTo(5, -10);
      // randC.lineTo(5, -7);

      // const randD = new THREE.Shape();
      // randD.moveTo(-5, -7);
      // randD.lineTo(-7, -7);
      // randD.lineTo(-8, -6);
      // randD.lineTo(-8, -5);
      // randD.lineTo(-7, -4);
      // randD.lineTo(-5, -4);
      // randD.lineTo(-5, -7);



      const extrudeSettings1 = {
        steps: 1,
        depth: 3,
        bevelEnabled: false
      };
    
      const extrudeSettings2 = {
        steps: 1,
        depth: 10,
        bevelEnabled: false
      };

      const extrudeSettings3 = {
        steps: 1,
        depth: 14,
        bevelEnabled: false
      };

      const extrudeSettings4 = {
        steps: 1,
        depth: 10,
        bevelEnabled: false
      };
      
      const extrudeSettings5 = {
        steps: 1,
        depth: 14,
        bevelEnabled: false
      };
      
      const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings1);
      const mesh = new THREE.Mesh(geometry, material1);
      scene.add(mesh);

      const randAGeometry = new THREE.ExtrudeGeometry(randA, extrudeSettings2);
      const randAmesh = new THREE.Mesh(randAGeometry, material2);
      randAmesh.rotation.y = Math.PI / 2;
      randAmesh.rotation.x = Math.PI / 2;
      randAmesh.position.x = -5;
      randAmesh.position.z = -7;
      randAmesh.position.y = 12;
      scene.add(randAmesh);

      const randBGeometry = new THREE.ExtrudeGeometry(randB, extrudeSettings3);
      const randBmesh = new THREE.Mesh(randBGeometry, material3);
      randBmesh.rotation.x = Math.PI / 2;
      randBmesh.position.y = 7;
      randBmesh.position.z = -7;
      scene.add(randBmesh);

      const randCGeometry = new THREE.ExtrudeGeometry(randC, extrudeSettings4);
      const randCmesh = new THREE.Mesh(randCGeometry, material4);
      randCmesh.rotation.y = Math.PI / 2;
      randCmesh.rotation.z = Math.PI / 2;
      randCmesh.position.x = -5;
      randCmesh.position.z = 10;
      randCmesh.position.y = -12;
      scene.add(randCmesh);

      const randDGeometry = new THREE.ExtrudeGeometry(randD, extrudeSettings5);
      const randDmesh = new THREE.Mesh(randDGeometry, material5);
      randDmesh.rotation.x = Math.PI / 2;
      randDmesh.position.y = 7;
      randDmesh.position.z = 7;
      scene.add(randDmesh);

      render();

      function render() {
        requestAnimationFrame(render);
        renderer.render(scene, camera);
      }
    </script>
  </body>
</html>
